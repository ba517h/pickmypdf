"use client";

import { useState } from "react";
import { UseFormReturn } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { MapPin, Sparkles } from "lucide-react";
import { ItineraryFormData } from "@/lib/types";
import { useToast } from "@/components/ui/use-toast";

interface TripOverviewStepProps {
  data: ItineraryFormData;
  onUpdate: (data: Partial<ItineraryFormData>) => void;
  form: UseFormReturn<ItineraryFormData>;
}

export function TripOverviewStep({ data, onUpdate, form }: TripOverviewStepProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const handleInputChange = (field: keyof ItineraryFormData, value: string) => {
    onUpdate({ [field]: value });
  };

  const generateSummary = async () => {
    setIsGenerating(true);
    try {
      const response = await fetch('/api/generate-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          routing: data.routing,
          destination: data.destination,
          highlights: data.hotels?.map(h => h.name).join(', ') + 
                     (data.experiences?.length ? ', ' + data.experiences.map(e => e.name).join(', ') : ''),
          dayWiseItinerary: data.dayWiseItinerary
        }),
      });

      if (response.ok) {
        const result = await response.json();
        if (result.summary) {
          onUpdate({ summary: result.summary });
          toast({
            title: "Trip Summary Generated & Saved",
            description: "AI has created a summary for your trip. You can edit it below.",
          });
        }
      } else {
        throw new Error('Failed to generate summary');
      }
    } catch (error) {
      console.error('Summary generation failed:', error);
      toast({
        title: "Generation Failed",
        description: "Could not generate summary. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const canGenerate = data.destination || data.routing || (data.dayWiseItinerary && data.dayWiseItinerary.length > 0);

  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <h2 className="text-xl font-semibold">Trip Overview</h2>
        <p className="text-muted-foreground">
          Provide a brief summary and routing information for your trip
        </p>
      </div>

      {/* Trip Summary */}
      <div className="space-y-2">
        <Label htmlFor="summary" className="font-semibold text-muted-foreground">Trip Summary</Label>
        <Textarea
          id="summary"
          placeholder="Write a brief 2-3 sentence summary of your trip..."
          value={data.summary || ""}
          onChange={(e) => handleInputChange("summary", e.target.value)}
          rows={4}
          className="font-medium"
        />
        <p className="text-sm text-muted-foreground">
          You can write your own summary or use the one generated by AI from your Smart Input.
        </p>
      </div>

      {/* Routing */}
      <div className="space-y-2">
        <Label htmlFor="routing" className="font-semibold text-muted-foreground flex items-center gap-2">
          <MapPin className="w-4 h-4" />
          Routing
        </Label>
        <Textarea
          id="routing"
          placeholder="e.g., Bangkok → Chiang Mai → Hanoi → Ho Chi Minh City → Siem Reap → Bangkok"
          value={data.routing}
          onChange={(e) => handleInputChange("routing", e.target.value)}
          rows={3}
          className="font-medium"
        />
        <p className="text-sm text-muted-foreground">
          Describe your travel route and major stops
        </p>
      </div>
    </div>
  );
} 